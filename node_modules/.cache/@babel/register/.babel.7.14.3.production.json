{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/jessenicholas/MazeML/\",\"caller\":{\"name\":\"@babel/node\"},\"configFile\":false,\"cwd\":\"/Users/jessenicholas/MazeML\",\"filename\":\"/Users/jessenicholas/MazeML/mazerobot.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"production\",\"root\":\"/Users/jessenicholas/MazeML\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.14.3:production": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/jessenicholas/MazeML/",
      "caller": {
        "name": "@babel/node"
      },
      "configFile": false,
      "cwd": "/Users/jessenicholas/MazeML",
      "filename": "/Users/jessenicholas/MazeML/mazerobot.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "browserslistConfigFile": false,
      "envName": "production",
      "root": "/Users/jessenicholas/MazeML",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-class-properties",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-numeric-separator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-nullish-coalescing-operator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": true,
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jessenicholas/MazeML/mazerobot.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "classPrivateMethods",
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "exportNamespaceFrom"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jessenicholas/MazeML/mazerobot.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jessenicholas/MazeML/",
        "sourceFileName": "mazerobot.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar msize = 15;\nvar fullboard = [];\nvar key_string = '<img src=\"key.png\" alt=\"\" width=\"66%\">';\nvar gate_string = '<img src=\"gate.png\" alt=\"\" width=\"66%\">';\nvar opengate_string = '<img src=\"opengate.png\" alt=\"\" width=\"66%\" height=\"66%\">';\n$('#key').html(key_string);\n$('#gate').html(gate_string);\nvar flag = false;\nvar runmode = false;\nvar partsetter = 'space';\nvar partimage = '';\n$('.panelpart').on('click', function () {\n  if (runmode) {\n    return;\n  }\n\n  $('.panelpart').css('border-color', 'black');\n  $(this).css('border-color', 'blue');\n  partsetter = this.id;\n  partimage = this.innerHTML;\n}); //Maze-making interface\n\nfunction makebuttons() {\n  for (i = 0; i < msize; i++) {\n    var newrow = document.createElement('div');\n    newrow.className = 'row';\n    newrow.id = 'row-' + i.toString();\n\n    for (j = 0; j < msize; j++) {\n      var newbut = document.createElement('button');\n      newbut.value = 'space';\n      newbut.className = 'mazepart';\n      newbut.id = 'r' + i.toString() + 'c' + j.toString();\n      newbut.addEventListener('mousedown', function () {\n        if (runmode) {\n          return;\n        }\n\n        flag = true;\n        this.value = partsetter;\n        this.innerHTML = partimage;\n\n        if (this.value == 'wall') {\n          $(this).css('background', 'black');\n          return;\n        }\n\n        if (this.value == 'gate') {\n          $(this).css('background', 'blue');\n        }\n\n        $(this).css('background', 'white');\n      });\n      newbut.addEventListener('mouseover', function () {\n        if (runmode) {\n          return;\n        }\n\n        if (flag == false || partsetter == 'key' || partsetter == 'gate') {\n          return;\n        }\n\n        this.value = partsetter;\n        this.innerHTML = partimage;\n\n        if (this.value == 'wall') {\n          $(this).css('background', 'black');\n          return;\n        }\n\n        $(this).css('background', 'white');\n      });\n      document.addEventListener('mouseup', function () {\n        flag = false;\n      });\n      newrow.appendChild(newbut);\n    }\n\n    document.getElementById('gamezone').appendChild(newrow);\n  }\n\n  $('.mazepart').css('width', (600 / msize).toString() + 'px');\n  $('.mazepart').css('height', (600 / msize).toString() + 'px');\n  $('#botpic').css('width', (600 / msize).toString() + 'px');\n  $('#botpic').css('height', (600 / msize).toString() + 'px'); //create an array of zeroes as placeholders before the maze is set.\n  //this will make indexing easier.\n\n  for (i = 0; i < msize; i++) {\n    var boardrow = [];\n\n    for (j = 0; j < msize; j++) {\n      boardrow.push(0);\n    }\n\n    fullboard.push(boardrow);\n  }\n} //function to determine if a square is within the range\n\n\nfunction inrange(x) {\n  let xcor = x[0];\n  let ycor = x[1];\n\n  if (xcor < 0 || ycor < 0 || xcor >= msize || ycor >= msize) {\n    return false;\n  }\n\n  return true;\n} //function to determine square adjacencies\n\n\nfunction move(square, direction) {\n  switch (direction) {\n    case 'r':\n      return [square[0] + 1, square[1]];\n\n    case 'l':\n      return [square[0] - 1, square[1]];\n\n    case 'u':\n      return [square[0], square[1] - 1];\n\n    case 'd':\n      return [square[0], square[1] + 1];\n  }\n}\n\nmakebuttons(); //update the colors of the squares according to the bot's valuation\n//the numbers get pretty big fast, which isn't a problem for\n//the AI but it is for us. This normalizes the relative values\n//so we can convert them into a shade of red (darker shade means AI likes\n//it less)\n//trying a new thing. tracking worst val, using that as benchmark for solid red.\n\nvar worstval = [0, 0];\n\nfunction updatecolors(stepnum, keystat) {\n  for (i = 0; i < fullboard.length; i++) {\n    for (j = 0; j < fullboard[i].length; j++) {\n      if (fullboard[i][j].stat == 'wall' || fullboard[i][j].stat == 'gate' || fullboard[i][j].stat == 'ungate') {\n        continue;\n      }\n\n      z = fullboard[i][j];\n      var shade = 255 * (1 - z.val[keystat] / worstval[keystat]).toString();\n      z.jquerid.css('background', 'rgb(255,' + shade + ',' + shade + ')');\n    }\n  }\n} //constructor for maze components\n\n\nfunction square(coord) {\n  this.x = coord[0];\n  this.y = coord[1];\n  this.pos = coord;\n  this.jquerid = $('#r' + this.y.toString() + 'c' + this.x.toString()); //valuations given different states. only states the AI knows\n  // are: has it picked up a key?\n\n  this.val = [0, 0]; //type of component. Empty space, key, gate, start, finish, wall\n\n  this.stat = 'space'; //get list of neighbors.\n\n  this.neighborlist = function () {\n    var neighbors = [];\n\n    for (k = 0; k < 4; k++) {\n      let testsquare = move(this.pos, ['r', 'l', 'u', 'd'][k]);\n\n      if (inrange(testsquare) == false) {\n        continue;\n      }\n\n      let b = fullboard[testsquare[0]][testsquare[1]]; //gate changes to 'ungate' when key is picked up.\n\n      if (b.stat == 'wall' || b.stat == 'gate') {\n        continue;\n      }\n\n      neighbors.push(b);\n    }\n\n    return neighbors;\n  }; //evaluate neighbors to find the most desirable square given\n  //the keystat (has the AI picked up a key)\n\n\n  this.bestneighbor = function (keystat) {\n    //get the best neighboring value\n    var bestval = this.neighborlist()[0].val[keystat];\n    let lam = this.neighborlist().length;\n\n    for (i = 0; i < lam; i++) {\n      if (this.neighborlist()[i].val[keystat] > bestval) {\n        bestval = this.neighborlist()[i].val[keystat];\n      }\n    } //randomly choose a neighbor with that value in case of tie\n    //there will be a lot of ties, especially early on\n\n\n    let topchoices = this.neighborlist().filter(x => x.val[keystat] == bestval);\n    var finalchoice = topchoices[Math.floor(Math.random() * topchoices.length)];\n    return finalchoice;\n  }; //update the value of the square the bot is leaving by\n  //averaging it with it's neighbors.\n  //NOT CURRENTLY BEING USED but may use for more complicated mazes\n  //especially if they have 'uncertain' moves (portals that take you\n  //to square A half the time, square B half the time, etc)\n\n\n  this.updateval = function (keystat) {\n    var neighborvals = 0;\n    var lamda = this.neighborlist();\n\n    for (i = 0; i < lamda.length; i++) {\n      neighborvals += lamda[i].val[keystat];\n    }\n\n    let newval = neighborvals / lamda.length;\n    return newval;\n  };\n} //create the maze the user built\n\n\nfunction makeboard() {\n  for (i = 0; i < msize; i++) {\n    for (j = 0; j < msize; j++) {\n      var z = new square([i, j]);\n      z.stat = z.jquerid.val();\n\n      if (z.stat == 'key') {\n        keyspot = z;\n      }\n\n      if (z.stat == 'gate') {\n        gatespot = z;\n      }\n\n      if (z.stat == 'start') {\n        starter = z;\n      }\n\n      fullboard[i][j] = z;\n    }\n  }\n} //store the start position, key and gate spot for referencing convencience\n\n\nvar starter;\nvar keyspot;\nvar gatespot;\nvar robot = {\n  paused: false,\n  speed: 1000,\n  //position, in the form of a maze component.\n  pos: starter,\n  //total of steps taken since first run. NOT reset each run.\n  stepper: 0,\n  //path taken during the run. AI remembers path since begining of run,\n  //but not previous runs.\n  path: [],\n  runsteps: 0,\n  runhistory: [],\n  trialnum: 0,\n  //does the AI have the key?\n  haskey: 0,\n  //starts run, resets maze (but not values/stepper)\n  startrun: function () {\n    this.trialnum++;\n    this.pos = starter;\n    this.path = [];\n    this.haskey = 0; //if there is a gate, lock it again\n\n    if (gatespot) {\n      gatespot.stat = 'gate';\n      gatespot.jquerid.html(gate_string);\n    } //if there is a key, place it again\n\n\n    if (keyspot) {\n      keyspot.stat = 'key';\n      keyspot.jquerid.html(key_string);\n    } //put the bot back at the starting pos, initiate greed loop\n\n\n    $('#mazebot').animate({\n      left: 600 / msize * starter.pos[0].toString() + 'px',\n      top: 600 / msize * starter.pos[1].toString() + 'px'\n    }, 10, robot.greedyrun());\n  },\n  //main recursive function.\n  //so called because it acts 'greedily', making the move with the best valuation\n  //exploration is encouraged by the fact that unexplored squares have\n  //valuation 0, which is a maximum.\n  greedyrun: function () {\n    if (this.paused) {\n      return;\n    } //if the bot is at the end, start the next run\n\n\n    if (this.pos.stat == 'end') {\n      this.runhistory.push(this.runsteps);\n      this.runsteps = 0;\n      let plotter = document.getElementById('progresstracker');\n      Plotly.newPlot(plotter, [{\n        y: this.runhistory\n      }], {\n        margin: {\n          t: 0\n        }\n      });\n      this.startrun();\n      return;\n    } //if the bot is on the key, pick it up. Unlock the gate.\n\n\n    if (this.pos.stat == 'key') {\n      this.path = [];\n      this.haskey = 1;\n      this.pos.stat = 'unkey';\n      this.pos.innerHTML = '';\n\n      if (gatespot) {\n        //neighbor list filters out maze parts w status 'gate',\n        //so any change of status name puts it in play\n        gatespot.stat = 'ungate';\n        gatespot.jquerid.html(opengate_string);\n      }\n    } //commit to next square. best valuation given key status\n\n\n    var nextsquare = this.pos.bestneighbor(this.haskey);\n    let xcor = nextsquare.pos[0];\n    let ycor = nextsquare.pos[1];\n    this.stepper += 1;\n    this.runsteps++; //update valuation of  square to 1 less than best neighbor\n    //(which is it's next square).\n\n    this.pos.val[this.haskey] = nextsquare.val[this.haskey] - 1;\n\n    if (this.pos.val[this.haskey] < worstval[this.haskey]) {\n      worstval[this.haskey] = this.pos.val[this.haskey];\n    } //update the colors\n\n\n    updatecolors(this.stepper, this.haskey); //officially move to the next square\n\n    this.pos = nextsquare; //actually animate the bot to the next square. function recurses.\n\n    $('#mazebot').animate({\n      left: 600 / msize * xcor.toString() + 'px',\n      top: 600 / msize * ycor.toString() + 'px'\n    }, this.speed, function () {\n      robot.greedyrun();\n    });\n  }\n}; //set the speed\n\n$('#speedslider').on('input', function () {\n  var mysetting = $(this).val();\n  var milsecs = 1020 - 100 * mysetting;\n  robot.speed = milsecs;\n}); //add listener to start button to trigger this whole thing.\n\n$('#startbutton').on('click', function () {\n  if (!runmode) {\n    runmode = true;\n  }\n\n  robot.paused = false;\n  $('#mazebot').show();\n  makeboard();\n  $('#clearbutton').prop('disabled', true);\n  robot.startrun();\n});\n$('#stopbutton').on('click', function () {\n  runmode = false;\n  robot.paused = true;\n  $('#mazebot').hide();\n  $('#clearbutton').prop('disabled', false); //clears the values\n\n  makeboard();\n  $('#progresstracker').html('');\n  robot.trialnum = 0;\n  robot.runhistory = [];\n  worstval = [0, 0];\n});\n$('#clearbutton').on('click', function () {\n  $('.mazepart').val('space');\n  $('.mazepart').html('');\n  $('.mazepart').css('background', 'white');\n});\n$('#wallfill').on('click', function () {\n  $('.mazepart').val('wall');\n  $('.mazepart').html('');\n  $('.mazepart').css('background', 'black');\n});\n$('.sizeboy').on('click', function () {\n  $('#stopbutton').click();\n  $('.sizeboy').css('border-style', 'none');\n  $(this).css('border-style', 'solid');\n  $('#gamezone').html('');\n  msize = $(this).val();\n  fullboard = [];\n  makebuttons();\n});\n$('#wall').click(); //function for converting a string to a maze.\n//good for saving/generating mazes quickly.\n\nfunction loadmaze(x) {\n  let mazedim = x.length;\n\n  switch (mazedim) {\n    case 10:\n      $('#smallboy').click();\n      break;\n\n    case 15:\n      $('#mediumboy').click();\n      break;\n\n    case 20:\n      $('#bigboy').click();\n      break;\n\n    default:\n      return;\n  }\n\n  for (i = 0; i < mazedim; i++) {\n    for (j = 0; j < mazedim; j++) {\n      var targetsquare = $('#r' + i.toString() + 'c' + j.toString());\n      var valtofill;\n      var valcode = x[i][j];\n\n      switch (valcode) {\n        case 'b':\n          valtofill = 'space';\n          break;\n\n        case 'w':\n          valtofill = 'wall';\n          break;\n\n        case 'e':\n          valtofill = 'end';\n          break;\n\n        case 's':\n          valtofill = 'start';\n          break;\n\n        case 'g':\n          valtofill = 'gate';\n          break;\n\n        case 'k':\n          valtofill = 'key';\n          break;\n\n        default:\n          return;\n      }\n\n      targetsquare.val(valtofill);\n      targetsquare.val($('#' + valtofill).html());\n      targetsquare.css('background', 'white');\n\n      if (valtofill == 'wall') {\n        targetsquare.css('background', 'black');\n      }\n    }\n  }\n}\n\nfunction partabbrev(x) {\n  switch (x) {\n    case 'space':\n      return 'b';\n\n    case 'wall':\n      return 'w';\n\n    case 'start':\n      return 's';\n\n    case 'key':\n      return 's';\n\n    case 'gate':\n      return 'g';\n\n    case 'end':\n      return 'e';\n\n    default:\n      return;\n  }\n}\n\nfunction getbuttonvals() {\n  var buttonvals = [];\n\n  for (j = 0; j < msize; j++) {\n    var rowval = \"\";\n\n    for (k = 0; k < msize; k++) {\n      var butval = $('#r' + j.toString() + 'c' + k.toString()).val();\n      rowval += partabbrev(butval);\n    }\n\n    buttonvals.push(rowval);\n  }\n\n  return buttonvals;\n}\n\n$('#saveboard').on('click', function () {\n  var mazestring = getbuttonvals();\n  console.log(mazestring);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "mazerobot.js"
      ],
      "names": [
        "msize",
        "fullboard",
        "key_string",
        "gate_string",
        "opengate_string",
        "$",
        "html",
        "flag",
        "runmode",
        "partsetter",
        "partimage",
        "on",
        "css",
        "id",
        "innerHTML",
        "makebuttons",
        "i",
        "newrow",
        "document",
        "createElement",
        "className",
        "toString",
        "j",
        "newbut",
        "value",
        "addEventListener",
        "appendChild",
        "getElementById",
        "boardrow",
        "push",
        "inrange",
        "x",
        "xcor",
        "ycor",
        "move",
        "square",
        "direction",
        "worstval",
        "updatecolors",
        "stepnum",
        "keystat",
        "length",
        "stat",
        "z",
        "shade",
        "val",
        "jquerid",
        "coord",
        "y",
        "pos",
        "neighborlist",
        "neighbors",
        "k",
        "testsquare",
        "b",
        "bestneighbor",
        "bestval",
        "lam",
        "topchoices",
        "filter",
        "finalchoice",
        "Math",
        "floor",
        "random",
        "updateval",
        "neighborvals",
        "lamda",
        "newval",
        "makeboard",
        "keyspot",
        "gatespot",
        "starter",
        "robot",
        "paused",
        "speed",
        "stepper",
        "path",
        "runsteps",
        "runhistory",
        "trialnum",
        "haskey",
        "startrun",
        "animate",
        "left",
        "top",
        "greedyrun",
        "plotter",
        "Plotly",
        "newPlot",
        "margin",
        "t",
        "nextsquare",
        "mysetting",
        "milsecs",
        "show",
        "prop",
        "hide",
        "click",
        "loadmaze",
        "mazedim",
        "targetsquare",
        "valtofill",
        "valcode",
        "partabbrev",
        "getbuttonvals",
        "buttonvals",
        "rowval",
        "butval",
        "mazestring",
        "console",
        "log"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/jessenicholas/MazeML/",
      "sourcesContent": [
        "var msize = 15;\nvar fullboard = []\n\nvar key_string = '<img src=\"key.png\" alt=\"\" width=\"66%\">'\nvar gate_string = '<img src=\"gate.png\" alt=\"\" width=\"66%\">'\nvar opengate_string = '<img src=\"opengate.png\" alt=\"\" width=\"66%\" height=\"66%\">'\n\n$('#key').html(key_string)\n\n\n\n\n\n$('#gate').html(gate_string)\n\n\n\n\nvar flag=false;\nvar runmode = false;\nvar partsetter = 'space'\nvar partimage = ''\n$('.panelpart').on('click', function(){\n  if (runmode){\n    return;\n  }\n  $('.panelpart').css('border-color','black');\n  $(this).css('border-color','blue');\n  partsetter = this.id\n  partimage = this.innerHTML\n\n})\n//Maze-making interface\nfunction makebuttons(){\n\n\n\nfor (i=0;i<msize;i++){\n  var newrow = document.createElement('div')\n  newrow.className = 'row';\n  newrow.id = 'row-'+i.toString()\n\n  for (j=0;j<msize;j++){\n    var newbut = document.createElement('button')\n    newbut.value = 'space';\n\n    newbut.className = 'mazepart'\n    newbut.id = 'r'+i.toString()+'c'+j.toString()\n\n    newbut.addEventListener('mousedown', function(){\n      if (runmode){\n        return;\n      }\n      flag = true;\n      this.value = partsetter\n      this.innerHTML = partimage\n\n      if (this.value == 'wall'){\n        $(this).css('background','black')\n        return;\n      }\n      if (this.value == 'gate'){\n        $(this).css('background','blue')\n      }\n      $(this).css('background','white')\n    })\n    newbut.addEventListener('mouseover', function(){\n      if (runmode){\n        return;\n      }\n      if (flag == false || partsetter == 'key' || partsetter == 'gate'){\n        return;\n      }\n\n      this.value = partsetter\n      this.innerHTML = partimage\n\n      if (this.value == 'wall'){\n        $(this).css('background','black')\n        return;\n      }\n\n      $(this).css('background','white')\n    })\n    document.addEventListener('mouseup', function(){\n      flag = false;\n    })\n\n\n\n\n    newrow.appendChild(newbut)\n\n\n  }\n  document.getElementById('gamezone').appendChild(newrow)\n}\n$('.mazepart').css('width',(600/msize).toString()+'px')\n$('.mazepart').css('height',(600/msize).toString()+'px')\n$('#botpic').css('width',(600/msize).toString()+'px')\n$('#botpic').css('height',(600/msize).toString()+'px')\n\n\n//create an array of zeroes as placeholders before the maze is set.\n//this will make indexing easier.\n\nfor (i=0;i<msize;i++){\n  var boardrow = []\n  for (j=0;j<msize;j++){\n    boardrow.push(0)\n  }\n  fullboard.push(boardrow)\n\n}\n}\n//function to determine if a square is within the range\nfunction inrange(x){\n  let xcor = x[0]\n  let ycor = x[1]\n  if (xcor <0 || ycor < 0 || xcor >= msize || ycor >= msize){\n    return false;\n  }\n  return true;\n}\n\n//function to determine square adjacencies\nfunction move(square, direction){\n  switch (direction) {\n    case 'r':\n    return [square[0]+1,square[1]]\n\n    case 'l':\n    return [square[0]-1,square[1]]\n\n    case 'u':\n    return [square[0],square[1]-1]\n\n    case 'd':\n    return [square[0],square[1]+1]\n\n\n\n  }\n}\n\nmakebuttons()\n\n\n//update the colors of the squares according to the bot's valuation\n//the numbers get pretty big fast, which isn't a problem for\n//the AI but it is for us. This normalizes the relative values\n//so we can convert them into a shade of red (darker shade means AI likes\n//it less)\n\n//trying a new thing. tracking worst val, using that as benchmark for solid red.\nvar worstval = [0,0]\n\nfunction updatecolors(stepnum,keystat){\n  for (i=0;i<fullboard.length;i++){\n    for (j=0;j<fullboard[i].length;j++){\n\n      if (fullboard[i][j].stat == 'wall' || fullboard[i][j].stat == 'gate' || fullboard[i][j].stat == 'ungate'){\n        continue;\n      }\n      z = fullboard[i][j]\n\n\n      var shade = 255*(1-z.val[keystat]/worstval[keystat]).toString()\n      z.jquerid.css('background','rgb(255,'+shade+','+shade+')')\n    }\n  }\n}\n\n//constructor for maze components\nfunction square(coord){\n  this.x = coord[0]\n  this.y = coord[1]\n\n  this.pos = coord\n  this.jquerid = $('#r'+this.y.toString()+'c'+this.x.toString())\n\n//valuations given different states. only states the AI knows\n// are: has it picked up a key?\n  this.val = [0,0];\n\n\n//type of component. Empty space, key, gate, start, finish, wall\n  this.stat = 'space';\n\n//get list of neighbors.\n  this.neighborlist = function(){\n    var neighbors = []\n    for (k=0;k<4;k++){\n      let testsquare = move(this.pos, ['r','l','u','d'][k])\n      if (inrange(testsquare) == false){\n        continue;\n      }\n\n\n      let b = fullboard[testsquare[0]][testsquare[1]]\n      //gate changes to 'ungate' when key is picked up.\n        if (b.stat=='wall' || b.stat == 'gate'){\n        continue;\n      }\n      neighbors.push(b)\n    }\n    return neighbors\n\n  }\n//evaluate neighbors to find the most desirable square given\n//the keystat (has the AI picked up a key)\n  this.bestneighbor = function(keystat){\n\n    //get the best neighboring value\n    var bestval = this.neighborlist()[0].val[keystat]\n    let lam = this.neighborlist().length;\n    for (i=0;i<lam;i++){\n      if (this.neighborlist()[i].val[keystat] > bestval){\n        bestval = this.neighborlist()[i].val[keystat]\n      }\n    }\n\n    //randomly choose a neighbor with that value in case of tie\n    //there will be a lot of ties, especially early on\n    let topchoices = this.neighborlist().filter(x => x.val[keystat] == bestval)\n    var finalchoice = topchoices[Math.floor(Math.random()*topchoices.length)]\n    return finalchoice\n  }\n\n\n  //update the value of the square the bot is leaving by\n  //averaging it with it's neighbors.\n\n  //NOT CURRENTLY BEING USED but may use for more complicated mazes\n  //especially if they have 'uncertain' moves (portals that take you\n  //to square A half the time, square B half the time, etc)\n\n\n  this.updateval = function(keystat){\n    var neighborvals = 0\n\n\n    var lamda = this.neighborlist()\n    for (i=0;i<lamda.length;i++){\n      neighborvals += lamda[i].val[keystat]\n\n    }\n    let newval = neighborvals/lamda.length;\n    return newval\n  }\n}\n\n//create the maze the user built\nfunction makeboard(){\n  for (i=0;i<msize;i++){\n    for (j=0;j<msize;j++){\n      var z = new square([i,j])\n      z.stat = z.jquerid.val()\n      if (z.stat == 'key'){\n        keyspot = z\n      }\n      if (z.stat == 'gate'){\n        gatespot = z\n      }\n      if (z.stat == 'start'){\n\n        starter = z\n      }\n\n      fullboard[i][j] = z\n\n    }\n  }\n\n}\n\n//store the start position, key and gate spot for referencing convencience\nvar starter;\nvar keyspot;\nvar gatespot;\n\n\n\n\nvar robot = {\n\n  paused: false,\n\n  speed: 1000,\n\n//position, in the form of a maze component.\n  pos: starter,\n\n//total of steps taken since first run. NOT reset each run.\n\n  stepper:0,\n\n//path taken during the run. AI remembers path since begining of run,\n//but not previous runs.\n  path: [],\n\n  runsteps:0,\n\n  runhistory:[],\n\n  trialnum:0,\n\n//does the AI have the key?\n  haskey:0,\n\n  //starts run, resets maze (but not values/stepper)\n  startrun: function(){\n    this.trialnum++\n    this.pos = starter\n    this.path = []\n    this.haskey = 0;\n\n\n    //if there is a gate, lock it again\n    if (gatespot){\n      gatespot.stat = 'gate'\n      gatespot.jquerid.html(gate_string)\n    }\n\n    //if there is a key, place it again\n    if (keyspot){\n      keyspot.stat = 'key'\n      keyspot.jquerid.html(key_string)\n    }\n\n    //put the bot back at the starting pos, initiate greed loop\n    $('#mazebot').animate({left:(600/msize)*starter.pos[0].toString()+'px',top:(600/msize)*starter.pos[1].toString()+'px'},10,robot.greedyrun())\n\n  },\n\n //main recursive function.\n //so called because it acts 'greedily', making the move with the best valuation\n //exploration is encouraged by the fact that unexplored squares have\n //valuation 0, which is a maximum.\n\n  greedyrun: function(){\n\n    if (this.paused){\n      return;\n    }\n\n\n//if the bot is at the end, start the next run\n    if (this.pos.stat == 'end'){\n      this.runhistory.push(this.runsteps)\n      this.runsteps = 0\n      let plotter = document.getElementById('progresstracker');\n      \tPlotly.newPlot( plotter,[ {y:this.runhistory }],\n      \t{margin: { t: 0 } } );\n\n        this.startrun()\n        return;\n    }\n\n//if the bot is on the key, pick it up. Unlock the gate.\n    if (this.pos.stat == 'key'){\n      this.path = []\n      this.haskey = 1;\n      this.pos.stat = 'unkey'\n      this.pos.innerHTML = ''\n      if (gatespot){\n        //neighbor list filters out maze parts w status 'gate',\n        //so any change of status name puts it in play\n        gatespot.stat = 'ungate'\n        gatespot.jquerid.html(opengate_string)\n      }\n    }\n\n    //commit to next square. best valuation given key status\n    var nextsquare = this.pos.bestneighbor(this.haskey)\n    let xcor = nextsquare.pos[0]\n    let ycor = nextsquare.pos[1]\n\n    this.stepper+=1\n\n    this.runsteps++\n\n\n\n    //update valuation of  square to 1 less than best neighbor\n    //(which is it's next square).\n    this.pos.val[this.haskey] = nextsquare.val[this.haskey]-1\n    if (this.pos.val[this.haskey] < worstval[this.haskey]){\n      worstval[this.haskey] = this.pos.val[this.haskey]\n    }\n\n    //update the colors\n    updatecolors(this.stepper,this.haskey)\n\n    //officially move to the next square\n    this.pos = nextsquare\n\n    //actually animate the bot to the next square. function recurses.\n    $('#mazebot').animate({left:(600/msize)*xcor.toString()+'px',top:(600/msize)*ycor.toString()+'px'},this.speed,function(){\n      robot.greedyrun()\n    })\n  }\n\n\n}\n\n//set the speed\n$('#speedslider').on('input',function(){\n  var mysetting = $(this).val()\n  var milsecs = 1020-100*mysetting\n  robot.speed = milsecs\n})\n\n\n//add listener to start button to trigger this whole thing.\n\n$('#startbutton').on('click', function(){\n  if (!runmode){\n    runmode = true;\n  }\n  robot.paused = false;\n\n  $('#mazebot').show();\n\n  makeboard()\n\n  $('#clearbutton').prop('disabled',true)\n\n\n  robot.startrun()\n\n})\n\n$('#stopbutton').on('click', function(){\n  runmode = false;\n  robot.paused = true;\n  $('#mazebot').hide();\n\n  $('#clearbutton').prop('disabled',false)\n\n\n  //clears the values\n  makeboard();\n  $('#progresstracker').html('')\n  robot.trialnum = 0\n  robot.runhistory = []\n  worstval = [0,0]\n\n})\n\n$('#clearbutton').on('click', function(){\n  $('.mazepart').val('space')\n\n\n\n\n  $('.mazepart').html('')\n  $('.mazepart').css('background','white')\n\n})\n\n$('#wallfill').on('click', function(){\n  $('.mazepart').val('wall')\n\n\n\n\n  $('.mazepart').html('')\n  $('.mazepart').css('background','black')\n\n})\n\n\n\n\n$('.sizeboy').on('click',function(){\n  $('#stopbutton').click();\n  $('.sizeboy').css('border-style','none')\n  $(this).css('border-style','solid')\n  $('#gamezone').html('')\n  msize = $(this).val()\n  fullboard = []\n  makebuttons();\n})\n\n$('#wall').click();\n\n//function for converting a string to a maze.\n//good for saving/generating mazes quickly.\n\nfunction loadmaze(x){\n\n  let mazedim = x.length\n  switch (mazedim) {\n    case 10:\n      $('#smallboy').click()\n      break;\n    case 15:\n    $('#mediumboy').click();\n    break;\n    case 20:\n    $('#bigboy').click();\n    break;\n    default:\n    return;\n\n  }\n  for (i=0;i<mazedim;i++){\n    for (j=0;j<mazedim;j++){\n      var targetsquare = $('#r'+i.toString()+'c'+j.toString())\n      var valtofill;\n      var valcode = x[i][j]\n      switch (valcode) {\n        case 'b':\n        valtofill = 'space'\n        break;\n\n        case 'w':\n        valtofill = 'wall'\n        break;\n\n        case 'e':\n        valtofill = 'end'\n        break;\n\n        case 's':\n        valtofill = 'start'\n        break;\n\n        case 'g':\n        valtofill = 'gate'\n        break;\n\n        case 'k':\n        valtofill = 'key'\n        break;\n\n        default:\n        return;\n\n\n\n      }\n      targetsquare.val(valtofill)\n      targetsquare.val($('#'+valtofill).html())\n      targetsquare.css('background','white')\n      if (valtofill == 'wall'){\n        targetsquare.css('background','black')\n      }\n    }\n\n\n  }\n\n}\n\n\n\n\nfunction partabbrev(x){\n  switch (x) {\n    case 'space':\n    return 'b'\n\n    case 'wall':\n    return 'w'\n\n    case 'start':\n    return 's'\n\n    case 'key':\n    return 's'\n\n    case 'gate':\n    return 'g'\n\n    case 'end':\n    return 'e'\n\n    default:\n    return;\n\n\n  }\n}\n\nfunction getbuttonvals(){\n  var buttonvals = []\n\n  for (j=0;j<msize;j++){\n    var rowval = \"\"\n    for (k=0;k<msize;k++){\n      var butval = $('#r'+j.toString()+'c'+k.toString()).val()\n      rowval+=partabbrev(butval)\n    }\n    buttonvals.push(rowval)\n  }\n  return buttonvals\n}\n$('#saveboard').on('click', function(){\n\n\n  var mazestring = getbuttonvals()\n  \n  console.log(mazestring)\n})\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1628470820938
  }
}