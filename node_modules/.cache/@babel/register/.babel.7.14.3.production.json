{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/jessenicholas/MazeML/\",\"caller\":{\"name\":\"@babel/node\"},\"configFile\":false,\"cwd\":\"/Users/jessenicholas/MazeML\",\"filename\":\"/Users/jessenicholas/MazeML/mazerobot.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"production\",\"root\":\"/Users/jessenicholas/MazeML\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.14.3:production": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/jessenicholas/MazeML/",
      "caller": {
        "name": "@babel/node"
      },
      "configFile": false,
      "cwd": "/Users/jessenicholas/MazeML",
      "filename": "/Users/jessenicholas/MazeML/mazerobot.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "browserslistConfigFile": false,
      "envName": "production",
      "root": "/Users/jessenicholas/MazeML",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-class-properties",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-numeric-separator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-nullish-coalescing-operator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": true,
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jessenicholas/MazeML/mazerobot.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "classPrivateMethods",
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "exportNamespaceFrom"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jessenicholas/MazeML/mazerobot.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jessenicholas/MazeML/",
        "sourceFileName": "mazerobot.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar msize = 15;\nvar fullboard = [];\nvar key_string = '<img src=\"key.png\" alt=\"\" width=\"66%\">';\nvar gate_string = '<img src=\"gate.png\" alt=\"\" width=\"66%\">';\nvar opengate_string = '<img src=\"opengate.png\" alt=\"\" width=\"66%\">';\n$('#key').html(key_string);\n$('#gate').html(gate_string);\nvar flag = false;\nvar runmode = false;\nvar partsetter = 'space';\nvar partimage = '';\n$('.panelpart').on('click', function () {\n  if (runmode) {\n    return;\n  }\n\n  $('.panelpart').css('border-color', 'black');\n  $(this).css('border-color', 'blue');\n  partsetter = this.id;\n  partimage = this.innerHTML;\n}); //Maze-making interface\n\nfunction makebuttons() {\n  for (i = 0; i < msize; i++) {\n    var newrow = document.createElement('div');\n    newrow.className = 'row';\n    newrow.id = 'row-' + i.toString();\n\n    for (j = 0; j < msize; j++) {\n      var newbut = document.createElement('button');\n      newbut.value = 'space';\n      newbut.className = 'mazepart';\n      newbut.id = 'r' + i.toString() + 'c' + j.toString();\n      newbut.addEventListener('mousedown', function () {\n        if (runmode) {\n          return;\n        }\n\n        flag = true;\n        this.value = partsetter;\n        this.innerHTML = partimage;\n\n        if (this.value == 'wall') {\n          $(this).css('background', 'black');\n          return;\n        }\n\n        if (this.value == 'gate') {\n          $(this).css('background', 'blue');\n        }\n\n        $(this).css('background', 'white');\n      });\n      newbut.addEventListener('mouseover', function () {\n        if (runmode) {\n          return;\n        }\n\n        if (flag == false || partsetter == 'key' || partsetter == 'gate') {\n          return;\n        }\n\n        this.value = partsetter;\n        this.innerHTML = partimage;\n\n        if (this.value == 'wall') {\n          $(this).css('background', 'black');\n          return;\n        }\n\n        $(this).css('background', 'white');\n      });\n      document.addEventListener('mouseup', function () {\n        flag = false;\n      });\n      newrow.appendChild(newbut);\n    }\n\n    document.getElementById('gamezone').appendChild(newrow);\n  }\n\n  $('.mazepart').css('width', (600 / msize).toString() + 'px');\n  $('.mazepart').css('height', (600 / msize).toString() + 'px');\n  $('#botpic').css('width', (600 / msize).toString() + 'px');\n  $('#botpic').css('height', (600 / msize).toString() + 'px'); //create an array of zeroes as placeholders before the maze is set.\n  //this will make indexing easier.\n\n  for (i = 0; i < msize; i++) {\n    var boardrow = [];\n\n    for (j = 0; j < msize; j++) {\n      boardrow.push(0);\n    }\n\n    fullboard.push(boardrow);\n  }\n} //function to determine if a square is within the range\n\n\nfunction inrange(x) {\n  let xcor = x[0];\n  let ycor = x[1];\n\n  if (xcor < 0 || ycor < 0 || xcor >= msize || ycor >= msize) {\n    return false;\n  }\n\n  return true;\n} //function to determine square adjacencies\n\n\nfunction move(square, direction) {\n  switch (direction) {\n    case 'r':\n      return [square[0] + 1, square[1]];\n\n    case 'l':\n      return [square[0] - 1, square[1]];\n\n    case 'u':\n      return [square[0], square[1] - 1];\n\n    case 'd':\n      return [square[0], square[1] + 1];\n  }\n}\n\nmakebuttons(); //update the colors of the squares according to the bot's valuation\n//the numbers get pretty big fast, which isn't a problem for\n//the AI but it is for us. This normalizes the relative values\n//so we can convert them into a shade of red (darker shade means AI likes\n//it less)\n//trying a new thing. tracking worst val, using that as benchmark for solid red.\n\nvar worstval = [0, 0];\n\nfunction updatecolors(stepnum, keystat) {\n  for (i = 0; i < fullboard.length; i++) {\n    for (j = 0; j < fullboard[i].length; j++) {\n      if (fullboard[i][j].stat == 'wall' || fullboard[i][j].stat == 'gate' || fullboard[i][j].stat == 'ungate') {\n        continue;\n      }\n\n      z = fullboard[i][j]; //this scaling factor seems to work okay. Might fiddle with it later\n\n      var shade = 255 * (1 - z.val[keystat] / worstval[keystat]).toString();\n      z.jquerid.css('background', 'rgb(255,' + shade + ',' + shade + ')');\n    }\n  }\n} //constructor for maze components\n\n\nfunction square(coord) {\n  this.x = coord[0];\n  this.y = coord[1];\n  this.pos = coord;\n  this.jquerid = $('#r' + this.y.toString() + 'c' + this.x.toString()); //valuations given different states. only states the AI knows\n  // are: has it picked up a key?\n\n  this.val = [0, 0]; //type of component. Empty space, key, gate, start, finish, wall\n\n  this.stat = 'space'; //get list of neighbors.\n\n  this.neighborlist = function () {\n    var neighbors = [];\n\n    for (k = 0; k < 4; k++) {\n      let testsquare = move(this.pos, ['r', 'l', 'u', 'd'][k]);\n\n      if (inrange(testsquare) == false) {\n        continue;\n      }\n\n      let b = fullboard[testsquare[0]][testsquare[1]]; //gate changes to 'ungate' when key is picked up.\n\n      if (b.stat == 'wall' || b.stat == 'gate') {\n        continue;\n      }\n\n      neighbors.push(b);\n    }\n\n    return neighbors;\n  }; //evaluate neighbors to find the most desirable square given\n  //the keystat (has the AI picked up a key)\n\n\n  this.bestneighbor = function (keystat) {\n    //get the best neighboring value\n    var bestval = this.neighborlist()[0].val[keystat];\n    let lam = this.neighborlist().length;\n\n    for (i = 0; i < lam; i++) {\n      if (this.neighborlist()[i].val[keystat] > bestval) {\n        bestval = this.neighborlist()[i].val[keystat];\n      }\n    } //randomly choose a neighbor with that value in case of tie\n    //there will be a lot of ties, especially early on\n\n\n    let topchoices = this.neighborlist().filter(x => x.val[keystat] == bestval);\n    var finalchoice = topchoices[Math.floor(Math.random() * topchoices.length)];\n    return finalchoice;\n  }; //update the value of the square the bot is leaving by\n  //averaging it with it's neighbors.\n  //NOT CURRENTLY BEING USED but may use for more complicated mazes\n  //especially if they have 'uncertain' moves (portals that take you\n  //to square A half the time, square B half the time, etc)\n\n\n  this.updateval = function (keystat) {\n    var neighborvals = 0;\n    var lamda = this.neighborlist();\n\n    for (i = 0; i < lamda.length; i++) {\n      neighborvals += lamda[i].val[keystat];\n    }\n\n    let newval = neighborvals / lamda.length;\n    return newval;\n  };\n} //create the maze the user built\n\n\nfunction makeboard() {\n  for (i = 0; i < msize; i++) {\n    for (j = 0; j < msize; j++) {\n      var z = new square([i, j]);\n      z.stat = z.jquerid.val();\n\n      if (z.stat == 'key') {\n        keyspot = z;\n      }\n\n      if (z.stat == 'gate') {\n        gatespot = z;\n      }\n\n      if (z.stat == 'start') {\n        starter = z;\n      }\n\n      fullboard[i][j] = z;\n    }\n  }\n} //store the start position, key and gate spot for referencing convencience\n\n\nvar starter;\nvar keyspot;\nvar gatespot;\nvar robot = {\n  paused: false,\n  speed: 1000,\n  //position, in the form of a maze component.\n  pos: starter,\n  //total of steps taken since first run. NOT reset each run.\n  stepper: 0,\n  //path taken during the run. AI remembers path since begining of run,\n  //but not previous runs.\n  path: [],\n  trialnum: 0,\n  //does the AI have the key?\n  haskey: 0,\n  //starts run, resets maze (but not values/stepper)\n  startrun: function () {\n    this.trialnum++;\n    this.pos = starter;\n    this.path = [];\n    this.haskey = 0; //if there is a gate, lock it again\n\n    if (gatespot) {\n      gatespot.stat = 'gate';\n      gatespot.jquerid.html(gate_string);\n    } //if there is a key, place it again\n\n\n    if (keyspot) {\n      keyspot.stat = 'key';\n      keyspot.jquerid.html(key_string);\n    } //put the bot back at the starting pos, initiate greed loop\n\n\n    $('#mazebot').animate({\n      left: 600 / msize * starter.pos[0].toString() + 'px',\n      top: 600 / msize * starter.pos[1].toString() + 'px'\n    }, 10, robot.greedyrun());\n  },\n  //main recursive function.\n  //so called because it acts 'greedily', making the move with the best valuation\n  //exploration is encouraged by the fact that unexplored squares have\n  //valuation 0, which is a maximum.\n  greedyrun: function () {\n    if (this.paused) {\n      return;\n    } //if the bot is at the end, start the next run\n\n\n    if (this.pos.stat == 'end') {\n      document.getElementById('progresstracker').innerHTML += '<p>' + this.trialnum.toString() + ' : ' + this.path.length.toString() + '</p><br>';\n      $(\"#progresstracker\").stop().animate({\n        scrollTop: $(\"#progresstracker\")[0].scrollHeight\n      }, 1000);\n      this.startrun();\n      return;\n    } //if the bot is on the key, pick it up. Unlock the gate.\n\n\n    if (this.pos.stat == 'key') {\n      this.path = [];\n      this.haskey = 1;\n      this.pos.stat = 'unkey';\n      this.pos.innerHTML = '';\n\n      if (gatespot) {\n        //neighbor list filters out maze parts w status 'gate',\n        //so any change of status name puts it in play\n        gatespot.stat = 'ungate';\n        gatespot.jquerid.html(opengate_string);\n      }\n    } //commit to next square. best valuation given key status\n\n\n    var nextsquare = this.pos.bestneighbor(this.haskey);\n    let xcor = nextsquare.pos[0];\n    let ycor = nextsquare.pos[1];\n    this.stepper += 1; //add current square to path. punish visited squares.\n    //this punishment is pretty harsh, but 'good' squares can recover\n    //pretty easily via the individual valuation. no room to explain here.\n\n    this.path.push(this.pos);\n\n    for (i = 0; i < this.path.length; i++) {\n      //\n      this.path[i].val[this.haskey] -= 1 / Math.log(this.stepper + 3);\n\n      if (this.path[i].val[this.haskey] < worstval[this.haskey]) {\n        worstval[this.haskey] = this.path[i].val[this.haskey];\n      }\n    } //update valuation of  square to 1 less than best neighbor\n    //(which is it's next square).\n\n\n    this.pos.val[this.haskey] = nextsquare.val[this.haskey] - 1;\n\n    if (this.pos.val[this.haskey] < worstval[this.haskey]) {\n      worstval[this.haskey] = this.pos.val[this.haskey];\n    } //update the colors\n\n\n    updatecolors(this.stepper, this.haskey); //officially move to the next square\n\n    this.pos = nextsquare; //actually animate the bot to the next square. function recurses.\n\n    $('#mazebot').animate({\n      left: 600 / msize * xcor.toString() + 'px',\n      top: 600 / msize * ycor.toString() + 'px'\n    }, this.speed, function () {\n      robot.greedyrun();\n    });\n  }\n}; //set the speed\n\n$('#speedslider').on('input', function () {\n  var mysetting = $(this).val();\n  var milsecs = 1020 - 100 * mysetting;\n  robot.speed = milsecs;\n}); //add listener to start button to trigger this whole thing.\n\n$('#startbutton').on('click', function () {\n  if (!runmode) {\n    runmode = true;\n  }\n\n  robot.paused = false;\n  $('#mazebot').show();\n  makeboard();\n  $('#clearbutton').prop('disabled', true);\n  robot.startrun();\n});\n$('#stopbutton').on('click', function () {\n  runmode = false;\n  robot.paused = true;\n  $('#mazebot').hide();\n  $('#clearbutton').prop('disabled', false); //clears the values\n\n  makeboard();\n  $('#progresstracker').html('');\n  robot.trialnum = 0;\n  worstval = [0, 0];\n});\n$('#clearbutton').on('click', function () {\n  $('.mazepart').val('space');\n  $('.mazepart').html('');\n  $('.mazepart').css('background', 'white');\n});\n$('#wallfill').on('click', function () {\n  $('.mazepart').val('wall');\n  $('.mazepart').html('');\n  $('.mazepart').css('background', 'black');\n});\n$('.sizeboy').on('click', function () {\n  $('.sizeboy').css('border-style', 'none');\n  $(this).css('border-style', 'solid');\n  $('#gamezone').html('');\n  msize = $(this).val();\n  fullboard = [];\n  makebuttons();\n}); //function for a quick random maze from the upper left to bottom right\n//corner\n\nfunction string2maze(x) {\n  var mazerows = x.split(\"/\");\n  let mazedim = mazerows.length;\n\n  switch (mazedim) {\n    case 10:\n      $('#smallboy').click();\n      break;\n\n    case 15:\n      $('#mediumboy').click();\n      break;\n\n    case 20:\n      $('#bigboy').click();\n      break;\n\n    default:\n      return;\n  }\n\n  for (i = 0; i < mazedim; i++) {\n    var targetrow = i;\n    var curcol = 0;\n    var rowparts = mazerows[i].split('p');\n\n    for (j = 0; j < rowparts.length; j++) {\n      var segment = rowparts[j];\n      var segmentparts = segment.split('*');\n      var seglength = segmentparts[0];\n      var segtype = segmentparts[1];\n\n      switch (segtype) {\n        case 'b':\n          partsetter = 'space';\n          break;\n\n        case 'w':\n          partsetter = 'wall';\n          break;\n\n        case 'g':\n          partsetter = 'gate';\n          break;\n\n        case 'k':\n          partsetter = 'key';\n          break;\n\n        case 's':\n          partsetter = 'start';\n          break;\n\n        case 'e':\n          partsetter = 'end';\n          break;\n\n        default:\n          return;\n      }\n\n      for (k = 0; k < seglength; k++) {\n        $('#r' + i.toString() + 'c' + curcol.toString()).val(partsetter);\n        $('#r' + i.toString() + 'c' + curcol.toString()).html($('#' + partsetter).html());\n        $('#r' + i.toString() + 'c' + curcol.toString()).css('background', 'white');\n\n        if (partsetter == 'wall') {\n          $('#r' + i.toString() + 'c' + curcol.toString()).css('background', 'black');\n        }\n\n        curcol++;\n      }\n    }\n  }\n}\n\nstring2maze('1*sp5*bp4*w/10*b/10*w/10*b/10*b/10*b/10*b/10*b/10*b/9*bp1*e');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "mazerobot.js"
      ],
      "names": [
        "msize",
        "fullboard",
        "key_string",
        "gate_string",
        "opengate_string",
        "$",
        "html",
        "flag",
        "runmode",
        "partsetter",
        "partimage",
        "on",
        "css",
        "id",
        "innerHTML",
        "makebuttons",
        "i",
        "newrow",
        "document",
        "createElement",
        "className",
        "toString",
        "j",
        "newbut",
        "value",
        "addEventListener",
        "appendChild",
        "getElementById",
        "boardrow",
        "push",
        "inrange",
        "x",
        "xcor",
        "ycor",
        "move",
        "square",
        "direction",
        "worstval",
        "updatecolors",
        "stepnum",
        "keystat",
        "length",
        "stat",
        "z",
        "shade",
        "val",
        "jquerid",
        "coord",
        "y",
        "pos",
        "neighborlist",
        "neighbors",
        "k",
        "testsquare",
        "b",
        "bestneighbor",
        "bestval",
        "lam",
        "topchoices",
        "filter",
        "finalchoice",
        "Math",
        "floor",
        "random",
        "updateval",
        "neighborvals",
        "lamda",
        "newval",
        "makeboard",
        "keyspot",
        "gatespot",
        "starter",
        "robot",
        "paused",
        "speed",
        "stepper",
        "path",
        "trialnum",
        "haskey",
        "startrun",
        "animate",
        "left",
        "top",
        "greedyrun",
        "stop",
        "scrollTop",
        "scrollHeight",
        "nextsquare",
        "log",
        "mysetting",
        "milsecs",
        "show",
        "prop",
        "hide",
        "string2maze",
        "mazerows",
        "split",
        "mazedim",
        "click",
        "targetrow",
        "curcol",
        "rowparts",
        "segment",
        "segmentparts",
        "seglength",
        "segtype"
      ],
      "mappings": ";;AAAA,IAAIA,KAAK,GAAG,EAAZ;AACA,IAAIC,SAAS,GAAG,EAAhB;AAEA,IAAIC,UAAU,GAAG,wCAAjB;AACA,IAAIC,WAAW,GAAG,yCAAlB;AACA,IAAIC,eAAe,GAAG,6CAAtB;AAEAC,CAAC,CAAC,MAAD,CAAD,CAAUC,IAAV,CAAeJ,UAAf;AAMAG,CAAC,CAAC,OAAD,CAAD,CAAWC,IAAX,CAAgBH,WAAhB;AAKA,IAAII,IAAI,GAAC,KAAT;AACA,IAAIC,OAAO,GAAG,KAAd;AACA,IAAIC,UAAU,GAAG,OAAjB;AACA,IAAIC,SAAS,GAAG,EAAhB;AACAL,CAAC,CAAC,YAAD,CAAD,CAAgBM,EAAhB,CAAmB,OAAnB,EAA4B,YAAU;AACpC,MAAIH,OAAJ,EAAY;AACV;AACD;;AACDH,EAAAA,CAAC,CAAC,YAAD,CAAD,CAAgBO,GAAhB,CAAoB,cAApB,EAAmC,OAAnC;AACAP,EAAAA,CAAC,CAAC,IAAD,CAAD,CAAQO,GAAR,CAAY,cAAZ,EAA2B,MAA3B;AACAH,EAAAA,UAAU,GAAG,KAAKI,EAAlB;AACAH,EAAAA,SAAS,GAAG,KAAKI,SAAjB;AAED,CATD,E,CAUA;;AACA,SAASC,WAAT,GAAsB;AAItB,OAAKC,CAAC,GAAC,CAAP,EAASA,CAAC,GAAChB,KAAX,EAAiBgB,CAAC,EAAlB,EAAqB;AACnB,QAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAb;AACAF,IAAAA,MAAM,CAACG,SAAP,GAAmB,KAAnB;AACAH,IAAAA,MAAM,CAACJ,EAAP,GAAY,SAAOG,CAAC,CAACK,QAAF,EAAnB;;AAEA,SAAKC,CAAC,GAAC,CAAP,EAASA,CAAC,GAACtB,KAAX,EAAiBsB,CAAC,EAAlB,EAAqB;AACnB,UAAIC,MAAM,GAAGL,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAI,MAAAA,MAAM,CAACC,KAAP,GAAe,OAAf;AAEAD,MAAAA,MAAM,CAACH,SAAP,GAAmB,UAAnB;AACAG,MAAAA,MAAM,CAACV,EAAP,GAAY,MAAIG,CAAC,CAACK,QAAF,EAAJ,GAAiB,GAAjB,GAAqBC,CAAC,CAACD,QAAF,EAAjC;AAEAE,MAAAA,MAAM,CAACE,gBAAP,CAAwB,WAAxB,EAAqC,YAAU;AAC7C,YAAIjB,OAAJ,EAAY;AACV;AACD;;AACDD,QAAAA,IAAI,GAAG,IAAP;AACA,aAAKiB,KAAL,GAAaf,UAAb;AACA,aAAKK,SAAL,GAAiBJ,SAAjB;;AAEA,YAAI,KAAKc,KAAL,IAAc,MAAlB,EAAyB;AACvBnB,UAAAA,CAAC,CAAC,IAAD,CAAD,CAAQO,GAAR,CAAY,YAAZ,EAAyB,OAAzB;AACA;AACD;;AACD,YAAI,KAAKY,KAAL,IAAc,MAAlB,EAAyB;AACvBnB,UAAAA,CAAC,CAAC,IAAD,CAAD,CAAQO,GAAR,CAAY,YAAZ,EAAyB,MAAzB;AACD;;AACDP,QAAAA,CAAC,CAAC,IAAD,CAAD,CAAQO,GAAR,CAAY,YAAZ,EAAyB,OAAzB;AACD,OAhBD;AAiBAW,MAAAA,MAAM,CAACE,gBAAP,CAAwB,WAAxB,EAAqC,YAAU;AAC7C,YAAIjB,OAAJ,EAAY;AACV;AACD;;AACD,YAAID,IAAI,IAAI,KAAR,IAAiBE,UAAU,IAAI,KAA/B,IAAwCA,UAAU,IAAI,MAA1D,EAAiE;AAC/D;AACD;;AAED,aAAKe,KAAL,GAAaf,UAAb;AACA,aAAKK,SAAL,GAAiBJ,SAAjB;;AAEA,YAAI,KAAKc,KAAL,IAAc,MAAlB,EAAyB;AACvBnB,UAAAA,CAAC,CAAC,IAAD,CAAD,CAAQO,GAAR,CAAY,YAAZ,EAAyB,OAAzB;AACA;AACD;;AAEDP,QAAAA,CAAC,CAAC,IAAD,CAAD,CAAQO,GAAR,CAAY,YAAZ,EAAyB,OAAzB;AACD,OAjBD;AAkBAM,MAAAA,QAAQ,CAACO,gBAAT,CAA0B,SAA1B,EAAqC,YAAU;AAC7ClB,QAAAA,IAAI,GAAG,KAAP;AACD,OAFD;AAOAU,MAAAA,MAAM,CAACS,WAAP,CAAmBH,MAAnB;AAGD;;AACDL,IAAAA,QAAQ,CAACS,cAAT,CAAwB,UAAxB,EAAoCD,WAApC,CAAgDT,MAAhD;AACD;;AACDZ,EAAAA,CAAC,CAAC,WAAD,CAAD,CAAeO,GAAf,CAAmB,OAAnB,EAA2B,CAAC,MAAIZ,KAAL,EAAYqB,QAAZ,KAAuB,IAAlD;AACAhB,EAAAA,CAAC,CAAC,WAAD,CAAD,CAAeO,GAAf,CAAmB,QAAnB,EAA4B,CAAC,MAAIZ,KAAL,EAAYqB,QAAZ,KAAuB,IAAnD;AACAhB,EAAAA,CAAC,CAAC,SAAD,CAAD,CAAaO,GAAb,CAAiB,OAAjB,EAAyB,CAAC,MAAIZ,KAAL,EAAYqB,QAAZ,KAAuB,IAAhD;AACAhB,EAAAA,CAAC,CAAC,SAAD,CAAD,CAAaO,GAAb,CAAiB,QAAjB,EAA0B,CAAC,MAAIZ,KAAL,EAAYqB,QAAZ,KAAuB,IAAjD,EAnEsB,CAsEtB;AACA;;AAEA,OAAKL,CAAC,GAAC,CAAP,EAASA,CAAC,GAAChB,KAAX,EAAiBgB,CAAC,EAAlB,EAAqB;AACnB,QAAIY,QAAQ,GAAG,EAAf;;AACA,SAAKN,CAAC,GAAC,CAAP,EAASA,CAAC,GAACtB,KAAX,EAAiBsB,CAAC,EAAlB,EAAqB;AACnBM,MAAAA,QAAQ,CAACC,IAAT,CAAc,CAAd;AACD;;AACD5B,IAAAA,SAAS,CAAC4B,IAAV,CAAeD,QAAf;AAED;AACA,C,CACD;;;AACA,SAASE,OAAT,CAAiBC,CAAjB,EAAmB;AACjB,MAAIC,IAAI,GAAGD,CAAC,CAAC,CAAD,CAAZ;AACA,MAAIE,IAAI,GAAGF,CAAC,CAAC,CAAD,CAAZ;;AACA,MAAIC,IAAI,GAAE,CAAN,IAAWC,IAAI,GAAG,CAAlB,IAAuBD,IAAI,IAAIhC,KAA/B,IAAwCiC,IAAI,IAAIjC,KAApD,EAA0D;AACxD,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD,C,CAED;;;AACA,SAASkC,IAAT,CAAcC,MAAd,EAAsBC,SAAtB,EAAgC;AAC9B,UAAQA,SAAR;AACE,SAAK,GAAL;AACA,aAAO,CAACD,MAAM,CAAC,CAAD,CAAN,GAAU,CAAX,EAAaA,MAAM,CAAC,CAAD,CAAnB,CAAP;;AAEA,SAAK,GAAL;AACA,aAAO,CAACA,MAAM,CAAC,CAAD,CAAN,GAAU,CAAX,EAAaA,MAAM,CAAC,CAAD,CAAnB,CAAP;;AAEA,SAAK,GAAL;AACA,aAAO,CAACA,MAAM,CAAC,CAAD,CAAP,EAAWA,MAAM,CAAC,CAAD,CAAN,GAAU,CAArB,CAAP;;AAEA,SAAK,GAAL;AACA,aAAO,CAACA,MAAM,CAAC,CAAD,CAAP,EAAWA,MAAM,CAAC,CAAD,CAAN,GAAU,CAArB,CAAP;AAXF;AAgBD;;AAEDpB,WAAW,G,CAGX;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAIsB,QAAQ,GAAG,CAAC,CAAD,EAAG,CAAH,CAAf;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA8BC,OAA9B,EAAsC;AACpC,OAAKxB,CAAC,GAAC,CAAP,EAASA,CAAC,GAACf,SAAS,CAACwC,MAArB,EAA4BzB,CAAC,EAA7B,EAAgC;AAC9B,SAAKM,CAAC,GAAC,CAAP,EAASA,CAAC,GAACrB,SAAS,CAACe,CAAD,CAAT,CAAayB,MAAxB,EAA+BnB,CAAC,EAAhC,EAAmC;AAEjC,UAAIrB,SAAS,CAACe,CAAD,CAAT,CAAaM,CAAb,EAAgBoB,IAAhB,IAAwB,MAAxB,IAAkCzC,SAAS,CAACe,CAAD,CAAT,CAAaM,CAAb,EAAgBoB,IAAhB,IAAwB,MAA1D,IAAoEzC,SAAS,CAACe,CAAD,CAAT,CAAaM,CAAb,EAAgBoB,IAAhB,IAAwB,QAAhG,EAAyG;AACvG;AACD;;AACDC,MAAAA,CAAC,GAAG1C,SAAS,CAACe,CAAD,CAAT,CAAaM,CAAb,CAAJ,CALiC,CAOjC;;AACA,UAAIsB,KAAK,GAAG,MAAI,CAAC,IAAED,CAAC,CAACE,GAAF,CAAML,OAAN,IAAeH,QAAQ,CAACG,OAAD,CAA1B,EAAqCnB,QAArC,EAAhB;AACAsB,MAAAA,CAAC,CAACG,OAAF,CAAUlC,GAAV,CAAc,YAAd,EAA2B,aAAWgC,KAAX,GAAiB,GAAjB,GAAqBA,KAArB,GAA2B,GAAtD;AACD;AACF;AACF,C,CAED;;;AACA,SAAST,MAAT,CAAgBY,KAAhB,EAAsB;AACpB,OAAKhB,CAAL,GAASgB,KAAK,CAAC,CAAD,CAAd;AACA,OAAKC,CAAL,GAASD,KAAK,CAAC,CAAD,CAAd;AAEA,OAAKE,GAAL,GAAWF,KAAX;AACA,OAAKD,OAAL,GAAezC,CAAC,CAAC,OAAK,KAAK2C,CAAL,CAAO3B,QAAP,EAAL,GAAuB,GAAvB,GAA2B,KAAKU,CAAL,CAAOV,QAAP,EAA5B,CAAhB,CALoB,CAOtB;AACA;;AACE,OAAKwB,GAAL,GAAW,CAAC,CAAD,EAAG,CAAH,CAAX,CAToB,CAYtB;;AACE,OAAKH,IAAL,GAAY,OAAZ,CAboB,CAetB;;AACE,OAAKQ,YAAL,GAAoB,YAAU;AAC5B,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAKC,CAAC,GAAC,CAAP,EAASA,CAAC,GAAC,CAAX,EAAaA,CAAC,EAAd,EAAiB;AACf,UAAIC,UAAU,GAAGnB,IAAI,CAAC,KAAKe,GAAN,EAAW,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAkBG,CAAlB,CAAX,CAArB;;AACA,UAAItB,OAAO,CAACuB,UAAD,CAAP,IAAuB,KAA3B,EAAiC;AAC/B;AACD;;AAGD,UAAIC,CAAC,GAAGrD,SAAS,CAACoD,UAAU,CAAC,CAAD,CAAX,CAAT,CAAyBA,UAAU,CAAC,CAAD,CAAnC,CAAR,CAPe,CAQf;;AACE,UAAIC,CAAC,CAACZ,IAAF,IAAQ,MAAR,IAAkBY,CAAC,CAACZ,IAAF,IAAU,MAAhC,EAAuC;AACvC;AACD;;AACDS,MAAAA,SAAS,CAACtB,IAAV,CAAeyB,CAAf;AACD;;AACD,WAAOH,SAAP;AAED,GAlBD,CAhBoB,CAmCtB;AACA;;;AACE,OAAKI,YAAL,GAAoB,UAASf,OAAT,EAAiB;AAEnC;AACA,QAAIgB,OAAO,GAAG,KAAKN,YAAL,GAAoB,CAApB,EAAuBL,GAAvB,CAA2BL,OAA3B,CAAd;AACA,QAAIiB,GAAG,GAAG,KAAKP,YAAL,GAAoBT,MAA9B;;AACA,SAAKzB,CAAC,GAAC,CAAP,EAASA,CAAC,GAACyC,GAAX,EAAezC,CAAC,EAAhB,EAAmB;AACjB,UAAI,KAAKkC,YAAL,GAAoBlC,CAApB,EAAuB6B,GAAvB,CAA2BL,OAA3B,IAAsCgB,OAA1C,EAAkD;AAChDA,QAAAA,OAAO,GAAG,KAAKN,YAAL,GAAoBlC,CAApB,EAAuB6B,GAAvB,CAA2BL,OAA3B,CAAV;AACD;AACF,KATkC,CAWnC;AACA;;;AACA,QAAIkB,UAAU,GAAG,KAAKR,YAAL,GAAoBS,MAApB,CAA2B5B,CAAC,IAAIA,CAAC,CAACc,GAAF,CAAML,OAAN,KAAkBgB,OAAlD,CAAjB;AACA,QAAII,WAAW,GAAGF,UAAU,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcL,UAAU,CAACjB,MAApC,CAAD,CAA5B;AACA,WAAOmB,WAAP;AACD,GAhBD,CArCoB,CAwDpB;AACA;AAEA;AACA;AACA;;;AAGA,OAAKI,SAAL,GAAiB,UAASxB,OAAT,EAAiB;AAChC,QAAIyB,YAAY,GAAG,CAAnB;AAGA,QAAIC,KAAK,GAAG,KAAKhB,YAAL,EAAZ;;AACA,SAAKlC,CAAC,GAAC,CAAP,EAASA,CAAC,GAACkD,KAAK,CAACzB,MAAjB,EAAwBzB,CAAC,EAAzB,EAA4B;AAC1BiD,MAAAA,YAAY,IAAIC,KAAK,CAAClD,CAAD,CAAL,CAAS6B,GAAT,CAAaL,OAAb,CAAhB;AAED;;AACD,QAAI2B,MAAM,GAAGF,YAAY,GAACC,KAAK,CAACzB,MAAhC;AACA,WAAO0B,MAAP;AACD,GAXD;AAYD,C,CAED;;;AACA,SAASC,SAAT,GAAoB;AAClB,OAAKpD,CAAC,GAAC,CAAP,EAASA,CAAC,GAAChB,KAAX,EAAiBgB,CAAC,EAAlB,EAAqB;AACnB,SAAKM,CAAC,GAAC,CAAP,EAASA,CAAC,GAACtB,KAAX,EAAiBsB,CAAC,EAAlB,EAAqB;AACnB,UAAIqB,CAAC,GAAG,IAAIR,MAAJ,CAAW,CAACnB,CAAD,EAAGM,CAAH,CAAX,CAAR;AACAqB,MAAAA,CAAC,CAACD,IAAF,GAASC,CAAC,CAACG,OAAF,CAAUD,GAAV,EAAT;;AACA,UAAIF,CAAC,CAACD,IAAF,IAAU,KAAd,EAAoB;AAClB2B,QAAAA,OAAO,GAAG1B,CAAV;AACD;;AACD,UAAIA,CAAC,CAACD,IAAF,IAAU,MAAd,EAAqB;AACnB4B,QAAAA,QAAQ,GAAG3B,CAAX;AACD;;AACD,UAAIA,CAAC,CAACD,IAAF,IAAU,OAAd,EAAsB;AAEpB6B,QAAAA,OAAO,GAAG5B,CAAV;AACD;;AAED1C,MAAAA,SAAS,CAACe,CAAD,CAAT,CAAaM,CAAb,IAAkBqB,CAAlB;AAED;AACF;AAEF,C,CAED;;;AACA,IAAI4B,OAAJ;AACA,IAAIF,OAAJ;AACA,IAAIC,QAAJ;AAKA,IAAIE,KAAK,GAAG;AAEVC,EAAAA,MAAM,EAAE,KAFE;AAIVC,EAAAA,KAAK,EAAE,IAJG;AAMZ;AACEzB,EAAAA,GAAG,EAAEsB,OAPK;AASZ;AAEEI,EAAAA,OAAO,EAAC,CAXE;AAaZ;AACA;AACEC,EAAAA,IAAI,EAAE,EAfI;AAiBVC,EAAAA,QAAQ,EAAC,CAjBC;AAmBZ;AACEC,EAAAA,MAAM,EAAC,CApBG;AAsBV;AACAC,EAAAA,QAAQ,EAAE,YAAU;AAClB,SAAKF,QAAL;AACA,SAAK5B,GAAL,GAAWsB,OAAX;AACA,SAAKK,IAAL,GAAY,EAAZ;AACA,SAAKE,MAAL,GAAc,CAAd,CAJkB,CAOlB;;AACA,QAAIR,QAAJ,EAAa;AACXA,MAAAA,QAAQ,CAAC5B,IAAT,GAAgB,MAAhB;AACA4B,MAAAA,QAAQ,CAACxB,OAAT,CAAiBxC,IAAjB,CAAsBH,WAAtB;AACD,KAXiB,CAalB;;;AACA,QAAIkE,OAAJ,EAAY;AACVA,MAAAA,OAAO,CAAC3B,IAAR,GAAe,KAAf;AACA2B,MAAAA,OAAO,CAACvB,OAAR,CAAgBxC,IAAhB,CAAqBJ,UAArB;AACD,KAjBiB,CAmBlB;;;AACAG,IAAAA,CAAC,CAAC,UAAD,CAAD,CAAc2E,OAAd,CAAsB;AAACC,MAAAA,IAAI,EAAE,MAAIjF,KAAL,GAAYuE,OAAO,CAACtB,GAAR,CAAY,CAAZ,EAAe5B,QAAf,EAAZ,GAAsC,IAA5C;AAAiD6D,MAAAA,GAAG,EAAE,MAAIlF,KAAL,GAAYuE,OAAO,CAACtB,GAAR,CAAY,CAAZ,EAAe5B,QAAf,EAAZ,GAAsC;AAA3F,KAAtB,EAAuH,EAAvH,EAA0HmD,KAAK,CAACW,SAAN,EAA1H;AAED,GA7CS;AA+CX;AACA;AACA;AACA;AAECA,EAAAA,SAAS,EAAE,YAAU;AAEnB,QAAI,KAAKV,MAAT,EAAgB;AACd;AACD,KAJkB,CAOvB;;;AACI,QAAI,KAAKxB,GAAL,CAASP,IAAT,IAAiB,KAArB,EAA2B;AACzBxB,MAAAA,QAAQ,CAACS,cAAT,CAAwB,iBAAxB,EAA2Cb,SAA3C,IACA,QAAM,KAAK+D,QAAL,CAAcxD,QAAd,EAAN,GAA+B,KAA/B,GAAqC,KAAKuD,IAAL,CAAUnC,MAAV,CAAiBpB,QAAjB,EAArC,GACC,UAFD;AAGAhB,MAAAA,CAAC,CAAC,kBAAD,CAAD,CAAsB+E,IAAtB,GAA6BJ,OAA7B,CAAqC;AAAEK,QAAAA,SAAS,EAAEhF,CAAC,CAAC,kBAAD,CAAD,CAAsB,CAAtB,EAAyBiF;AAAtC,OAArC,EAA0F,IAA1F;AACA,WAAKP,QAAL;AAEA;AACD,KAhBkB,CAkBvB;;;AACI,QAAI,KAAK9B,GAAL,CAASP,IAAT,IAAiB,KAArB,EAA2B;AACzB,WAAKkC,IAAL,GAAY,EAAZ;AACA,WAAKE,MAAL,GAAc,CAAd;AACA,WAAK7B,GAAL,CAASP,IAAT,GAAgB,OAAhB;AACA,WAAKO,GAAL,CAASnC,SAAT,GAAqB,EAArB;;AACA,UAAIwD,QAAJ,EAAa;AACX;AACA;AACAA,QAAAA,QAAQ,CAAC5B,IAAT,GAAgB,QAAhB;AACA4B,QAAAA,QAAQ,CAACxB,OAAT,CAAiBxC,IAAjB,CAAsBF,eAAtB;AACD;AACF,KA9BkB,CAgCnB;;;AACA,QAAImF,UAAU,GAAG,KAAKtC,GAAL,CAASM,YAAT,CAAsB,KAAKuB,MAA3B,CAAjB;AACA,QAAI9C,IAAI,GAAGuD,UAAU,CAACtC,GAAX,CAAe,CAAf,CAAX;AACA,QAAIhB,IAAI,GAAGsD,UAAU,CAACtC,GAAX,CAAe,CAAf,CAAX;AAEA,SAAK0B,OAAL,IAAc,CAAd,CArCmB,CAuCnB;AACA;AACA;;AACA,SAAKC,IAAL,CAAU/C,IAAV,CAAe,KAAKoB,GAApB;;AACA,SAAKjC,CAAC,GAAC,CAAP,EAASA,CAAC,GAAC,KAAK4D,IAAL,CAAUnC,MAArB,EAA4BzB,CAAC,EAA7B,EAAgC;AAE9B;AAEA,WAAK4D,IAAL,CAAU5D,CAAV,EAAa6B,GAAb,CAAiB,KAAKiC,MAAtB,KAAiC,IAAEjB,IAAI,CAAC2B,GAAL,CAAS,KAAKb,OAAL,GAAa,CAAtB,CAAnC;;AACA,UAAI,KAAKC,IAAL,CAAU5D,CAAV,EAAa6B,GAAb,CAAiB,KAAKiC,MAAtB,IAAgCzC,QAAQ,CAAC,KAAKyC,MAAN,CAA5C,EAA0D;AACxDzC,QAAAA,QAAQ,CAAC,KAAKyC,MAAN,CAAR,GAAwB,KAAKF,IAAL,CAAU5D,CAAV,EAAa6B,GAAb,CAAiB,KAAKiC,MAAtB,CAAxB;AACD;AAGF,KArDkB,CAuDnB;AACA;;;AACA,SAAK7B,GAAL,CAASJ,GAAT,CAAa,KAAKiC,MAAlB,IAA4BS,UAAU,CAAC1C,GAAX,CAAe,KAAKiC,MAApB,IAA4B,CAAxD;;AACA,QAAI,KAAK7B,GAAL,CAASJ,GAAT,CAAa,KAAKiC,MAAlB,IAA4BzC,QAAQ,CAAC,KAAKyC,MAAN,CAAxC,EAAsD;AACpDzC,MAAAA,QAAQ,CAAC,KAAKyC,MAAN,CAAR,GAAwB,KAAK7B,GAAL,CAASJ,GAAT,CAAa,KAAKiC,MAAlB,CAAxB;AACD,KA5DkB,CA8DnB;;;AACAxC,IAAAA,YAAY,CAAC,KAAKqC,OAAN,EAAc,KAAKG,MAAnB,CAAZ,CA/DmB,CAiEnB;;AACA,SAAK7B,GAAL,GAAWsC,UAAX,CAlEmB,CAoEnB;;AACAlF,IAAAA,CAAC,CAAC,UAAD,CAAD,CAAc2E,OAAd,CAAsB;AAACC,MAAAA,IAAI,EAAE,MAAIjF,KAAL,GAAYgC,IAAI,CAACX,QAAL,EAAZ,GAA4B,IAAlC;AAAuC6D,MAAAA,GAAG,EAAE,MAAIlF,KAAL,GAAYiC,IAAI,CAACZ,QAAL,EAAZ,GAA4B;AAAvE,KAAtB,EAAmG,KAAKqD,KAAxG,EAA8G,YAAU;AACtHF,MAAAA,KAAK,CAACW,SAAN;AACD,KAFD;AAGD;AA5HS,CAAZ,C,CAiIA;;AACA9E,CAAC,CAAC,cAAD,CAAD,CAAkBM,EAAlB,CAAqB,OAArB,EAA6B,YAAU;AACrC,MAAI8E,SAAS,GAAGpF,CAAC,CAAC,IAAD,CAAD,CAAQwC,GAAR,EAAhB;AACA,MAAI6C,OAAO,GAAG,OAAK,MAAID,SAAvB;AACAjB,EAAAA,KAAK,CAACE,KAAN,GAAcgB,OAAd;AACD,CAJD,E,CAOA;;AAEArF,CAAC,CAAC,cAAD,CAAD,CAAkBM,EAAlB,CAAqB,OAArB,EAA8B,YAAU;AACtC,MAAI,CAACH,OAAL,EAAa;AACXA,IAAAA,OAAO,GAAG,IAAV;AACD;;AACDgE,EAAAA,KAAK,CAACC,MAAN,GAAe,KAAf;AAEApE,EAAAA,CAAC,CAAC,UAAD,CAAD,CAAcsF,IAAd;AAEAvB,EAAAA,SAAS;AAET/D,EAAAA,CAAC,CAAC,cAAD,CAAD,CAAkBuF,IAAlB,CAAuB,UAAvB,EAAkC,IAAlC;AAGApB,EAAAA,KAAK,CAACO,QAAN;AAED,CAfD;AAiBA1E,CAAC,CAAC,aAAD,CAAD,CAAiBM,EAAjB,CAAoB,OAApB,EAA6B,YAAU;AACrCH,EAAAA,OAAO,GAAG,KAAV;AACAgE,EAAAA,KAAK,CAACC,MAAN,GAAe,IAAf;AACApE,EAAAA,CAAC,CAAC,UAAD,CAAD,CAAcwF,IAAd;AAEAxF,EAAAA,CAAC,CAAC,cAAD,CAAD,CAAkBuF,IAAlB,CAAuB,UAAvB,EAAkC,KAAlC,EALqC,CAQrC;;AACAxB,EAAAA,SAAS;AACT/D,EAAAA,CAAC,CAAC,kBAAD,CAAD,CAAsBC,IAAtB,CAA2B,EAA3B;AACAkE,EAAAA,KAAK,CAACK,QAAN,GAAiB,CAAjB;AACAxC,EAAAA,QAAQ,GAAG,CAAC,CAAD,EAAG,CAAH,CAAX;AAED,CAdD;AAgBAhC,CAAC,CAAC,cAAD,CAAD,CAAkBM,EAAlB,CAAqB,OAArB,EAA8B,YAAU;AACtCN,EAAAA,CAAC,CAAC,WAAD,CAAD,CAAewC,GAAf,CAAmB,OAAnB;AAKAxC,EAAAA,CAAC,CAAC,WAAD,CAAD,CAAeC,IAAf,CAAoB,EAApB;AACAD,EAAAA,CAAC,CAAC,WAAD,CAAD,CAAeO,GAAf,CAAmB,YAAnB,EAAgC,OAAhC;AAED,CATD;AAWAP,CAAC,CAAC,WAAD,CAAD,CAAeM,EAAf,CAAkB,OAAlB,EAA2B,YAAU;AACnCN,EAAAA,CAAC,CAAC,WAAD,CAAD,CAAewC,GAAf,CAAmB,MAAnB;AAKAxC,EAAAA,CAAC,CAAC,WAAD,CAAD,CAAeC,IAAf,CAAoB,EAApB;AACAD,EAAAA,CAAC,CAAC,WAAD,CAAD,CAAeO,GAAf,CAAmB,YAAnB,EAAgC,OAAhC;AAED,CATD;AAcAP,CAAC,CAAC,UAAD,CAAD,CAAcM,EAAd,CAAiB,OAAjB,EAAyB,YAAU;AACjCN,EAAAA,CAAC,CAAC,UAAD,CAAD,CAAcO,GAAd,CAAkB,cAAlB,EAAiC,MAAjC;AACAP,EAAAA,CAAC,CAAC,IAAD,CAAD,CAAQO,GAAR,CAAY,cAAZ,EAA2B,OAA3B;AACAP,EAAAA,CAAC,CAAC,WAAD,CAAD,CAAeC,IAAf,CAAoB,EAApB;AACAN,EAAAA,KAAK,GAAGK,CAAC,CAAC,IAAD,CAAD,CAAQwC,GAAR,EAAR;AACA5C,EAAAA,SAAS,GAAG,EAAZ;AACAc,EAAAA,WAAW;AACZ,CAPD,E,CASA;AACA;;AACA,SAAS+E,WAAT,CAAqB/D,CAArB,EAAuB;AACrB,MAAIgE,QAAQ,GAAGhE,CAAC,CAACiE,KAAF,CAAQ,GAAR,CAAf;AACA,MAAIC,OAAO,GAAGF,QAAQ,CAACtD,MAAvB;;AACA,UAAQwD,OAAR;AACE,SAAK,EAAL;AACE5F,MAAAA,CAAC,CAAC,WAAD,CAAD,CAAe6F,KAAf;AACA;;AACF,SAAK,EAAL;AACA7F,MAAAA,CAAC,CAAC,YAAD,CAAD,CAAgB6F,KAAhB;AACA;;AACA,SAAK,EAAL;AACA7F,MAAAA,CAAC,CAAC,SAAD,CAAD,CAAa6F,KAAb;AACA;;AACA;AACA;AAXF;;AAcA,OAAKlF,CAAC,GAAC,CAAP,EAASA,CAAC,GAACiF,OAAX,EAAmBjF,CAAC,EAApB,EAAuB;AACrB,QAAImF,SAAS,GAAGnF,CAAhB;AACA,QAAIoF,MAAM,GAAG,CAAb;AACA,QAAIC,QAAQ,GAAGN,QAAQ,CAAC/E,CAAD,CAAR,CAAYgF,KAAZ,CAAkB,GAAlB,CAAf;;AACA,SAAK1E,CAAC,GAAC,CAAP,EAASA,CAAC,GAAC+E,QAAQ,CAAC5D,MAApB,EAA2BnB,CAAC,EAA5B,EAA+B;AAC7B,UAAIgF,OAAO,GAAGD,QAAQ,CAAC/E,CAAD,CAAtB;AACA,UAAIiF,YAAY,GAAGD,OAAO,CAACN,KAAR,CAAc,GAAd,CAAnB;AACA,UAAIQ,SAAS,GAAGD,YAAY,CAAC,CAAD,CAA5B;AACA,UAAIE,OAAO,GAAGF,YAAY,CAAC,CAAD,CAA1B;;AACA,cAAQE,OAAR;AACE,aAAK,GAAL;AACAhG,UAAAA,UAAU,GAAG,OAAb;AAGE;;AACF,aAAK,GAAL;AACAA,UAAAA,UAAU,GAAG,MAAb;AACA;;AAEA,aAAK,GAAL;AACAA,UAAAA,UAAU,GAAG,MAAb;AACA;;AAEA,aAAK,GAAL;AACAA,UAAAA,UAAU,GAAG,KAAb;AACA;;AAEA,aAAK,GAAL;AACAA,UAAAA,UAAU,GAAG,OAAb;AACA;;AAEA,aAAK,GAAL;AACAA,UAAAA,UAAU,GAAG,KAAb;AACA;;AACA;AACA;AA1BF;;AA6BA,WAAK2C,CAAC,GAAC,CAAP,EAASA,CAAC,GAACoD,SAAX,EAAqBpD,CAAC,EAAtB,EAAyB;AACvB/C,QAAAA,CAAC,CAAC,OAAKW,CAAC,CAACK,QAAF,EAAL,GAAkB,GAAlB,GAAsB+E,MAAM,CAAC/E,QAAP,EAAvB,CAAD,CAA2CwB,GAA3C,CAA+CpC,UAA/C;AACAJ,QAAAA,CAAC,CAAC,OAAKW,CAAC,CAACK,QAAF,EAAL,GAAkB,GAAlB,GAAsB+E,MAAM,CAAC/E,QAAP,EAAvB,CAAD,CAA2Cf,IAA3C,CAAgDD,CAAC,CAAC,MAAII,UAAL,CAAD,CAAkBH,IAAlB,EAAhD;AACAD,QAAAA,CAAC,CAAC,OAAKW,CAAC,CAACK,QAAF,EAAL,GAAkB,GAAlB,GAAsB+E,MAAM,CAAC/E,QAAP,EAAvB,CAAD,CAA2CT,GAA3C,CAA+C,YAA/C,EAA4D,OAA5D;;AACA,YAAIH,UAAU,IAAI,MAAlB,EAAyB;AACvBJ,UAAAA,CAAC,CAAC,OAAKW,CAAC,CAACK,QAAF,EAAL,GAAkB,GAAlB,GAAsB+E,MAAM,CAAC/E,QAAP,EAAvB,CAAD,CAA2CT,GAA3C,CAA+C,YAA/C,EAA4D,OAA5D;AAED;;AACDwF,QAAAA,MAAM;AAEP;AACF;AAIF;AAEF;;AAEDN,WAAW,CAAC,6DAAD,CAAX",
      "sourceRoot": "/Users/jessenicholas/MazeML/",
      "sourcesContent": [
        "var msize = 15;\nvar fullboard = []\n\nvar key_string = '<img src=\"key.png\" alt=\"\" width=\"66%\">'\nvar gate_string = '<img src=\"gate.png\" alt=\"\" width=\"66%\">'\nvar opengate_string = '<img src=\"opengate.png\" alt=\"\" width=\"66%\">'\n\n$('#key').html(key_string)\n\n\n\n\n\n$('#gate').html(gate_string)\n\n\n\n\nvar flag=false;\nvar runmode = false;\nvar partsetter = 'space'\nvar partimage = ''\n$('.panelpart').on('click', function(){\n  if (runmode){\n    return;\n  }\n  $('.panelpart').css('border-color','black');\n  $(this).css('border-color','blue');\n  partsetter = this.id\n  partimage = this.innerHTML\n\n})\n//Maze-making interface\nfunction makebuttons(){\n\n\n\nfor (i=0;i<msize;i++){\n  var newrow = document.createElement('div')\n  newrow.className = 'row';\n  newrow.id = 'row-'+i.toString()\n\n  for (j=0;j<msize;j++){\n    var newbut = document.createElement('button')\n    newbut.value = 'space';\n\n    newbut.className = 'mazepart'\n    newbut.id = 'r'+i.toString()+'c'+j.toString()\n\n    newbut.addEventListener('mousedown', function(){\n      if (runmode){\n        return;\n      }\n      flag = true;\n      this.value = partsetter\n      this.innerHTML = partimage\n\n      if (this.value == 'wall'){\n        $(this).css('background','black')\n        return;\n      }\n      if (this.value == 'gate'){\n        $(this).css('background','blue')\n      }\n      $(this).css('background','white')\n    })\n    newbut.addEventListener('mouseover', function(){\n      if (runmode){\n        return;\n      }\n      if (flag == false || partsetter == 'key' || partsetter == 'gate'){\n        return;\n      }\n\n      this.value = partsetter\n      this.innerHTML = partimage\n\n      if (this.value == 'wall'){\n        $(this).css('background','black')\n        return;\n      }\n\n      $(this).css('background','white')\n    })\n    document.addEventListener('mouseup', function(){\n      flag = false;\n    })\n\n\n\n\n    newrow.appendChild(newbut)\n\n\n  }\n  document.getElementById('gamezone').appendChild(newrow)\n}\n$('.mazepart').css('width',(600/msize).toString()+'px')\n$('.mazepart').css('height',(600/msize).toString()+'px')\n$('#botpic').css('width',(600/msize).toString()+'px')\n$('#botpic').css('height',(600/msize).toString()+'px')\n\n\n//create an array of zeroes as placeholders before the maze is set.\n//this will make indexing easier.\n\nfor (i=0;i<msize;i++){\n  var boardrow = []\n  for (j=0;j<msize;j++){\n    boardrow.push(0)\n  }\n  fullboard.push(boardrow)\n\n}\n}\n//function to determine if a square is within the range\nfunction inrange(x){\n  let xcor = x[0]\n  let ycor = x[1]\n  if (xcor <0 || ycor < 0 || xcor >= msize || ycor >= msize){\n    return false;\n  }\n  return true;\n}\n\n//function to determine square adjacencies\nfunction move(square, direction){\n  switch (direction) {\n    case 'r':\n    return [square[0]+1,square[1]]\n\n    case 'l':\n    return [square[0]-1,square[1]]\n\n    case 'u':\n    return [square[0],square[1]-1]\n\n    case 'd':\n    return [square[0],square[1]+1]\n\n\n\n  }\n}\n\nmakebuttons()\n\n\n//update the colors of the squares according to the bot's valuation\n//the numbers get pretty big fast, which isn't a problem for\n//the AI but it is for us. This normalizes the relative values\n//so we can convert them into a shade of red (darker shade means AI likes\n//it less)\n\n//trying a new thing. tracking worst val, using that as benchmark for solid red.\nvar worstval = [0,0]\n\nfunction updatecolors(stepnum,keystat){\n  for (i=0;i<fullboard.length;i++){\n    for (j=0;j<fullboard[i].length;j++){\n\n      if (fullboard[i][j].stat == 'wall' || fullboard[i][j].stat == 'gate' || fullboard[i][j].stat == 'ungate'){\n        continue;\n      }\n      z = fullboard[i][j]\n\n      //this scaling factor seems to work okay. Might fiddle with it later\n      var shade = 255*(1-z.val[keystat]/worstval[keystat]).toString()\n      z.jquerid.css('background','rgb(255,'+shade+','+shade+')')\n    }\n  }\n}\n\n//constructor for maze components\nfunction square(coord){\n  this.x = coord[0]\n  this.y = coord[1]\n\n  this.pos = coord\n  this.jquerid = $('#r'+this.y.toString()+'c'+this.x.toString())\n\n//valuations given different states. only states the AI knows\n// are: has it picked up a key?\n  this.val = [0,0];\n\n\n//type of component. Empty space, key, gate, start, finish, wall\n  this.stat = 'space';\n\n//get list of neighbors.\n  this.neighborlist = function(){\n    var neighbors = []\n    for (k=0;k<4;k++){\n      let testsquare = move(this.pos, ['r','l','u','d'][k])\n      if (inrange(testsquare) == false){\n        continue;\n      }\n\n\n      let b = fullboard[testsquare[0]][testsquare[1]]\n      //gate changes to 'ungate' when key is picked up.\n        if (b.stat=='wall' || b.stat == 'gate'){\n        continue;\n      }\n      neighbors.push(b)\n    }\n    return neighbors\n\n  }\n//evaluate neighbors to find the most desirable square given\n//the keystat (has the AI picked up a key)\n  this.bestneighbor = function(keystat){\n\n    //get the best neighboring value\n    var bestval = this.neighborlist()[0].val[keystat]\n    let lam = this.neighborlist().length;\n    for (i=0;i<lam;i++){\n      if (this.neighborlist()[i].val[keystat] > bestval){\n        bestval = this.neighborlist()[i].val[keystat]\n      }\n    }\n\n    //randomly choose a neighbor with that value in case of tie\n    //there will be a lot of ties, especially early on\n    let topchoices = this.neighborlist().filter(x => x.val[keystat] == bestval)\n    var finalchoice = topchoices[Math.floor(Math.random()*topchoices.length)]\n    return finalchoice\n  }\n\n\n  //update the value of the square the bot is leaving by\n  //averaging it with it's neighbors.\n\n  //NOT CURRENTLY BEING USED but may use for more complicated mazes\n  //especially if they have 'uncertain' moves (portals that take you\n  //to square A half the time, square B half the time, etc)\n\n\n  this.updateval = function(keystat){\n    var neighborvals = 0\n\n\n    var lamda = this.neighborlist()\n    for (i=0;i<lamda.length;i++){\n      neighborvals += lamda[i].val[keystat]\n\n    }\n    let newval = neighborvals/lamda.length;\n    return newval\n  }\n}\n\n//create the maze the user built\nfunction makeboard(){\n  for (i=0;i<msize;i++){\n    for (j=0;j<msize;j++){\n      var z = new square([i,j])\n      z.stat = z.jquerid.val()\n      if (z.stat == 'key'){\n        keyspot = z\n      }\n      if (z.stat == 'gate'){\n        gatespot = z\n      }\n      if (z.stat == 'start'){\n\n        starter = z\n      }\n\n      fullboard[i][j] = z\n\n    }\n  }\n\n}\n\n//store the start position, key and gate spot for referencing convencience\nvar starter;\nvar keyspot;\nvar gatespot;\n\n\n\n\nvar robot = {\n\n  paused: false,\n\n  speed: 1000,\n\n//position, in the form of a maze component.\n  pos: starter,\n\n//total of steps taken since first run. NOT reset each run.\n\n  stepper:0,\n\n//path taken during the run. AI remembers path since begining of run,\n//but not previous runs.\n  path: [],\n\n  trialnum:0,\n\n//does the AI have the key?\n  haskey:0,\n\n  //starts run, resets maze (but not values/stepper)\n  startrun: function(){\n    this.trialnum++\n    this.pos = starter\n    this.path = []\n    this.haskey = 0;\n\n\n    //if there is a gate, lock it again\n    if (gatespot){\n      gatespot.stat = 'gate'\n      gatespot.jquerid.html(gate_string)\n    }\n\n    //if there is a key, place it again\n    if (keyspot){\n      keyspot.stat = 'key'\n      keyspot.jquerid.html(key_string)\n    }\n\n    //put the bot back at the starting pos, initiate greed loop\n    $('#mazebot').animate({left:(600/msize)*starter.pos[0].toString()+'px',top:(600/msize)*starter.pos[1].toString()+'px'},10,robot.greedyrun())\n\n  },\n\n //main recursive function.\n //so called because it acts 'greedily', making the move with the best valuation\n //exploration is encouraged by the fact that unexplored squares have\n //valuation 0, which is a maximum.\n\n  greedyrun: function(){\n\n    if (this.paused){\n      return;\n    }\n\n\n//if the bot is at the end, start the next run\n    if (this.pos.stat == 'end'){\n      document.getElementById('progresstracker').innerHTML+=\n      '<p>'+this.trialnum.toString()+' : '+this.path.length.toString()\n      +'</p><br>'\n      $(\"#progresstracker\").stop().animate({ scrollTop: $(\"#progresstracker\")[0].scrollHeight}, 1000);\n      this.startrun()\n\n      return;\n    }\n\n//if the bot is on the key, pick it up. Unlock the gate.\n    if (this.pos.stat == 'key'){\n      this.path = []\n      this.haskey = 1;\n      this.pos.stat = 'unkey'\n      this.pos.innerHTML = ''\n      if (gatespot){\n        //neighbor list filters out maze parts w status 'gate',\n        //so any change of status name puts it in play\n        gatespot.stat = 'ungate'\n        gatespot.jquerid.html(opengate_string)\n      }\n    }\n\n    //commit to next square. best valuation given key status\n    var nextsquare = this.pos.bestneighbor(this.haskey)\n    let xcor = nextsquare.pos[0]\n    let ycor = nextsquare.pos[1]\n\n    this.stepper+=1\n\n    //add current square to path. punish visited squares.\n    //this punishment is pretty harsh, but 'good' squares can recover\n    //pretty easily via the individual valuation. no room to explain here.\n    this.path.push(this.pos)\n    for (i=0;i<this.path.length;i++){\n\n      //\n\n      this.path[i].val[this.haskey] -= 1/Math.log(this.stepper+3)\n      if (this.path[i].val[this.haskey] < worstval[this.haskey]){\n        worstval[this.haskey] = this.path[i].val[this.haskey];\n      }\n\n\n    }\n\n    //update valuation of  square to 1 less than best neighbor\n    //(which is it's next square).\n    this.pos.val[this.haskey] = nextsquare.val[this.haskey]-1\n    if (this.pos.val[this.haskey] < worstval[this.haskey]){\n      worstval[this.haskey] = this.pos.val[this.haskey]\n    }\n\n    //update the colors\n    updatecolors(this.stepper,this.haskey)\n\n    //officially move to the next square\n    this.pos = nextsquare\n\n    //actually animate the bot to the next square. function recurses.\n    $('#mazebot').animate({left:(600/msize)*xcor.toString()+'px',top:(600/msize)*ycor.toString()+'px'},this.speed,function(){\n      robot.greedyrun()\n    })\n  }\n\n\n}\n\n//set the speed\n$('#speedslider').on('input',function(){\n  var mysetting = $(this).val()\n  var milsecs = 1020-100*mysetting\n  robot.speed = milsecs\n})\n\n\n//add listener to start button to trigger this whole thing.\n\n$('#startbutton').on('click', function(){\n  if (!runmode){\n    runmode = true;\n  }\n  robot.paused = false;\n\n  $('#mazebot').show();\n\n  makeboard()\n\n  $('#clearbutton').prop('disabled',true)\n\n\n  robot.startrun()\n\n})\n\n$('#stopbutton').on('click', function(){\n  runmode = false;\n  robot.paused = true;\n  $('#mazebot').hide();\n\n  $('#clearbutton').prop('disabled',false)\n\n\n  //clears the values\n  makeboard();\n  $('#progresstracker').html('')\n  robot.trialnum = 0\n  worstval = [0,0]\n\n})\n\n$('#clearbutton').on('click', function(){\n  $('.mazepart').val('space')\n\n\n\n\n  $('.mazepart').html('')\n  $('.mazepart').css('background','white')\n\n})\n\n$('#wallfill').on('click', function(){\n  $('.mazepart').val('wall')\n\n\n\n\n  $('.mazepart').html('')\n  $('.mazepart').css('background','black')\n\n})\n\n\n\n\n$('.sizeboy').on('click',function(){\n  $('.sizeboy').css('border-style','none')\n  $(this).css('border-style','solid')\n  $('#gamezone').html('')\n  msize = $(this).val()\n  fullboard = []\n  makebuttons();\n})\n\n//function for a quick random maze from the upper left to bottom right\n//corner\nfunction string2maze(x){\n  var mazerows = x.split(\"/\")\n  let mazedim = mazerows.length\n  switch (mazedim) {\n    case 10:\n      $('#smallboy').click()\n      break;\n    case 15:\n    $('#mediumboy').click();\n    break;\n    case 20:\n    $('#bigboy').click();\n    break;\n    default:\n    return;\n\n  }\n  for (i=0;i<mazedim;i++){\n    var targetrow = i\n    var curcol = 0\n    var rowparts = mazerows[i].split('p')\n    for (j=0;j<rowparts.length;j++){\n      var segment = rowparts[j]\n      var segmentparts = segment.split('*')\n      var seglength = segmentparts[0]\n      var segtype = segmentparts[1]\n      switch (segtype) {\n        case 'b':\n        partsetter = 'space'\n\n\n          break;\n        case 'w':\n        partsetter = 'wall'\n        break;\n\n        case 'g':\n        partsetter = 'gate'\n        break;\n\n        case 'k':\n        partsetter = 'key'\n        break;\n\n        case 's':\n        partsetter = 'start'\n        break;\n\n        case 'e':\n        partsetter = 'end'\n        break;\n        default:\n        return;\n\n      }\n      for (k=0;k<seglength;k++){\n        $('#r'+i.toString()+'c'+curcol.toString()).val(partsetter)\n        $('#r'+i.toString()+'c'+curcol.toString()).html($('#'+partsetter).html())\n        $('#r'+i.toString()+'c'+curcol.toString()).css('background','white')\n        if (partsetter == 'wall'){\n          $('#r'+i.toString()+'c'+curcol.toString()).css('background','black')\n\n        }\n        curcol++\n\n      }\n    }\n\n\n\n  }\n\n}\n\nstring2maze('1*sp5*bp4*w/10*b/10*w/10*b/10*b/10*b/10*b/10*b/10*b/9*bp1*e')\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1628358855553
  }
}